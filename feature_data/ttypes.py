#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Data(object):
    """
    Attributes:
     - outs
     - shapes
     - feats_shapes
     - origin_shape
     - resize_shape
     - inputs_mean
     - inputs_std

    """


    def __init__(self, outs=None, shapes=None, feats_shapes=None, origin_shape=None, resize_shape=None, inputs_mean=None, inputs_std=None,):
        self.outs = outs
        self.shapes = shapes
        self.feats_shapes = feats_shapes
        self.origin_shape = origin_shape
        self.resize_shape = resize_shape
        self.inputs_mean = inputs_mean
        self.inputs_std = inputs_std

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.outs = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.shapes = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.feats_shapes = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.origin_shape = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.resize_shape = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.inputs_mean = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.inputs_std = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Data')
        if self.outs is not None:
            oprot.writeFieldBegin('outs', TType.STRING, 1)
            oprot.writeString(self.outs.encode('utf-8') if sys.version_info[0] == 2 else self.outs)
            oprot.writeFieldEnd()
        if self.shapes is not None:
            oprot.writeFieldBegin('shapes', TType.STRING, 2)
            oprot.writeString(self.shapes.encode('utf-8') if sys.version_info[0] == 2 else self.shapes)
            oprot.writeFieldEnd()
        if self.feats_shapes is not None:
            oprot.writeFieldBegin('feats_shapes', TType.STRING, 3)
            oprot.writeString(self.feats_shapes.encode('utf-8') if sys.version_info[0] == 2 else self.feats_shapes)
            oprot.writeFieldEnd()
        if self.origin_shape is not None:
            oprot.writeFieldBegin('origin_shape', TType.STRING, 4)
            oprot.writeString(self.origin_shape.encode('utf-8') if sys.version_info[0] == 2 else self.origin_shape)
            oprot.writeFieldEnd()
        if self.resize_shape is not None:
            oprot.writeFieldBegin('resize_shape', TType.STRING, 5)
            oprot.writeString(self.resize_shape.encode('utf-8') if sys.version_info[0] == 2 else self.resize_shape)
            oprot.writeFieldEnd()
        if self.inputs_mean is not None:
            oprot.writeFieldBegin('inputs_mean', TType.STRING, 6)
            oprot.writeString(self.inputs_mean.encode('utf-8') if sys.version_info[0] == 2 else self.inputs_mean)
            oprot.writeFieldEnd()
        if self.inputs_std is not None:
            oprot.writeFieldBegin('inputs_std', TType.STRING, 7)
            oprot.writeString(self.inputs_std.encode('utf-8') if sys.version_info[0] == 2 else self.inputs_std)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Result(object):
    """
    Attributes:
     - det_string
     - time_string
     - length

    """


    def __init__(self, det_string=None, time_string=None, length=None,):
        self.det_string = det_string
        self.time_string = time_string
        self.length = length

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.det_string = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.time_string = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.length = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Result')
        if self.det_string is not None:
            oprot.writeFieldBegin('det_string', TType.STRING, 1)
            oprot.writeString(self.det_string.encode('utf-8') if sys.version_info[0] == 2 else self.det_string)
            oprot.writeFieldEnd()
        if self.time_string is not None:
            oprot.writeFieldBegin('time_string', TType.STRING, 2)
            oprot.writeString(self.time_string.encode('utf-8') if sys.version_info[0] == 2 else self.time_string)
            oprot.writeFieldEnd()
        if self.length is not None:
            oprot.writeFieldBegin('length', TType.I32, 3)
            oprot.writeI32(self.length)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Data)
Data.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'outs', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'shapes', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'feats_shapes', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'origin_shape', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'resize_shape', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'inputs_mean', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'inputs_std', 'UTF8', None, ),  # 7
)
all_structs.append(Result)
Result.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'det_string', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'time_string', 'UTF8', None, ),  # 2
    (3, TType.I32, 'length', None, None, ),  # 3
)
fix_spec(all_structs)
del all_structs
